version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: mcminibots-db
    environment:
      POSTGRES_DB: mcminibots
      POSTGRES_USER: mcminibots_user
      POSTGRES_PASSWORD: mcminibots_password_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcminibots_user -d mcminibots"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mcminibots-backend
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=your-secure-secret-key-change-in-production
      - JWT_SECRET_KEY=your-secure-jwt-key-change-in-production
      - DATABASE_URL=postgresql://mcminibots_user:mcminibots_password_123@database:5432/mcminibots
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/auth/verify"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mcminibots-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  backend_uploads: